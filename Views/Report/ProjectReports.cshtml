@model IEnumerable<StackFlow.ViewModels.ProjectReportViewModel>

@{
    ViewData["Title"] = "Project Reports";
    // Get pagination data from ViewBag
    var currentPage = ViewBag.CurrentPage;
    var pageSize = ViewBag.PageSize;
    var totalPages = ViewBag.TotalPages;
}

<div class="card shadow-lg border-0 rounded-4 p-4 mt-4 mb-4">
    <div class="d-flex justify-content-between align-items-start mb-3">
        <h2 class="card-title mb-0 fw-bold text-primary display-6">
            <i class="bi bi-bar-chart-fill me-2"></i> Project Reports
        </h2>
        <a asp-action="Index" asp-controller="Dashboard" class="btn btn-outline-secondary rounded-pill shadow-sm animate-btn">
            <i class="bi bi-arrow-left-circle me-1"></i> Back to Dashboard
        </a>
    </div>
    <hr class="mb-4" />

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-x-circle-fill me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info rounded-4 shadow-sm" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> No projects available for reporting.
        </div>
    }
    else
    {
        <!-- Tab Navigation -->
        <ul class="nav nav-tabs mb-4" id="reportTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="table-tab" data-bs-toggle="tab" data-bs-target="#table-tab-pane" type="button" role="tab" aria-controls="table-tab-pane" aria-selected="true">
                    <i class="bi bi-table me-1"></i> Table View
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="charts-tab" data-bs-toggle="tab" data-bs-target="#charts-tab-pane" type="button" role="tab" aria-controls="charts-tab-pane" aria-selected="false">
                    <i class="bi bi-pie-chart-fill me-1"></i> Charts
                </button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="reportTabsContent">
            <!-- Table View Tab -->
            <div class="tab-pane fade show active" id="table-tab-pane" role="tabpanel" aria-labelledby="table-tab" tabindex="0">
                <div class="table-responsive rounded-4 shadow-sm mb-3">
                    <table class="table table-hover table-bordered mb-0">
                        <thead class="table-primary text-white">
                            <tr>
                                <th scope="col">Project Name</th>
                                <th scope="col">Status</th>
                                <th scope="col">Total Tickets</th>
                                <th scope="col">To Do</th>
                                <th scope="col">In Progress</th>
                                <th scope="col">In Review</th>
                                <th scope="col">Completed</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var report in Model)
                            {
                                <tr>
                                    <td>@report.Project.Name</td>
                                    <td>
                                        <span class="badge rounded-pill
                                            @(report.Project.Status == "Active" ? "bg-success" :
                                            report.Project.Status == "On Hold" ? "bg-warning text-dark" : "bg-secondary")">
                                            @report.Project.Status
                                        </span>
                                    </td>
                                    <td>@report.TotalTickets</td>
                                    <td>@report.ToDoTickets</td>
                                    <td>@report.InProgressTickets</td>
                                    <td>@report.InReviewTickets</td>
                                    <td>@report.CompletedTickets</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @* Pagination Controls *@
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link rounded-pill mx-1" href="@Url.Action("ProjectReports", new { page = currentPage - 1, pageSize = pageSize })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link rounded-pill mx-1" href="@Url.Action("ProjectReports", new { page = i, pageSize = pageSize })">@i</a>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link rounded-pill mx-1" href="@Url.Action("ProjectReports", new { page = currentPage + 1, pageSize = pageSize })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>

            <!-- Charts Tab -->
            <div class="tab-pane fade" id="charts-tab-pane" role="tabpanel" aria-labelledby="charts-tab" tabindex="0">
                <div class="row g-3">
                    <!-- Project Status Distribution -->
                    <div class="col-12 col-lg-6">
                        <div class="card h-100 shadow-sm rounded-4">
                            <div class="card-header bg-primary text-white rounded-top-4">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-pie-chart-fill me-2"></i>Project Status Distribution
                                </h5>
                            </div>
                            <div class="card-body p-2">
                                <div class="chart-container" style="position: relative; height: 250px;">
                                    <canvas id="projectStatusChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Ticket Status Distribution -->
                    <div class="col-12 col-lg-6">
                        <div class="card h-100 shadow-sm rounded-4">
                            <div class="card-header bg-primary text-white rounded-top-4">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-bar-chart-fill me-2"></i>Ticket Status Distribution
                                </h5>
                            </div>
                            <div class="card-body p-2">
                                <div class="chart-container" style="position: relative; height: 250px;">
                                    <canvas id="ticketStatusChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Project Ticket Breakdown -->
                    <div class="col-12">
                        <div class="card shadow-sm rounded-4">
                            <div class="card-header bg-primary text-white rounded-top-4">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-stack me-2"></i>Project Ticket Breakdown
                                </h5>
                            </div>
                            <div class="card-body p-2">
                                <div class="chart-container" style="position: relative; height: 300px;">
                                    <canvas id="projectTicketChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <!-- Add Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Add chartjs-plugin-datalabels for better labels -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Register the plugin to all charts
            Chart.register(ChartDataLabels);

            // Prepare data for charts
            const projectNames = @Html.Raw(Json.Serialize(Model.Select(r => r.Project.Name).ToArray()));
            const projectStatuses = @Html.Raw(Json.Serialize(Model.Select(r => r.Project.Status).ToArray()));
            const todoTickets = @Html.Raw(Json.Serialize(Model.Select(r => r.ToDoTickets).ToArray()));
            const inProgressTickets = @Html.Raw(Json.Serialize(Model.Select(r => r.InProgressTickets).ToArray()));
            const inReviewTickets = @Html.Raw(Json.Serialize(Model.Select(r => r.InReviewTickets).ToArray()));
            const completedTickets = @Html.Raw(Json.Serialize(Model.Select(r => r.CompletedTickets).ToArray()));
            const totalTickets = @Html.Raw(Json.Serialize(Model.Select(r => r.TotalTickets).ToArray()));

            // Count project statuses
            const statusCounts = {};
            projectStatuses.forEach(status => {
                statusCounts[status] = (statusCounts[status] || 0) + 1;
            });

            // Common chart options
            const commonChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            boxWidth: 12
                        }
                    },
                    datalabels: {
                        display: false // We'll enable selectively
                    },
                    tooltip: {
                        boxPadding: 5,
                        bodySpacing: 5
                    }
                }
            };

            // Project Status Pie Chart
            const statusCtx = document.getElementById('projectStatusChart').getContext('2d');
            new Chart(statusCtx, {
                type: 'pie',
                data: {
                    labels: Object.keys(statusCounts),
                    datasets: [{
                        data: Object.values(statusCounts),
                        backgroundColor: [
                            'rgba(40, 167, 69, 0.8)', // Active - green
                            'rgba(255, 193, 7, 0.8)',  // On Hold - yellow
                            'rgba(108, 117, 125, 0.8)' // Other - gray
                        ],
                        borderColor: [
                            'rgba(40, 167, 69, 1)',
                            'rgba(255, 193, 7, 1)',
                            'rgba(108, 117, 125, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    ...commonChartOptions,
                    plugins: {
                        ...commonChartOptions.plugins,
                        datalabels: {
                            color: '#fff',
                            font: {
                                weight: 'bold'
                            },
                            formatter: (value, ctx) => {
                                const total = ctx.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${percentage}%`;
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });

            // Ticket Status Bar Chart
            const ticketStatusCtx = document.getElementById('ticketStatusChart').getContext('2d');
            new Chart(ticketStatusCtx, {
                type: 'bar',
                data: {
                    labels: ['To Do', 'In Progress', 'In Review', 'Completed'],
                    datasets: [{
                        label: 'Ticket Count',
                        data: [
                            todoTickets.reduce((a, b) => a + b, 0),
                            inProgressTickets.reduce((a, b) => a + b, 0),
                            inReviewTickets.reduce((a, b) => a + b, 0),
                            completedTickets.reduce((a, b) => a + b, 0)
                        ],
                        backgroundColor: [
                            'rgba(13, 110, 253, 0.7)',   // To Do - blue
                            'rgba(255, 193, 7, 0.7)',    // In Progress - yellow
                            'rgba(111, 66, 193, 0.7)',   // In Review - purple
                            'rgba(25, 135, 84, 0.7)'     // Completed - green
                        ],
                        borderColor: [
                            'rgba(13, 110, 253, 1)',
                            'rgba(255, 193, 7, 1)',
                            'rgba(111, 66, 193, 1)',
                            'rgba(25, 135, 84, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    ...commonChartOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        ...commonChartOptions.plugins,
                        legend: {
                            display: false
                        },
                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                            color: '#333',
                            font: {
                                weight: 'bold'
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });

            // Project Ticket Breakdown Stacked Bar Chart
            const projectTicketCtx = document.getElementById('projectTicketChart').getContext('2d');
            new Chart(projectTicketCtx, {
                type: 'bar',
                data: {
                    labels: projectNames,
                    datasets: [
                        {
                            label: 'To Do',
                            data: todoTickets,
                            backgroundColor: 'rgba(13, 110, 253, 0.7)',
                            borderColor: 'rgba(13, 110, 253, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'In Progress',
                            data: inProgressTickets,
                            backgroundColor: 'rgba(255, 193, 7, 0.7)',
                            borderColor: 'rgba(255, 193, 7, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'In Review',
                            data: inReviewTickets,
                            backgroundColor: 'rgba(111, 66, 193, 0.7)',
                            borderColor: 'rgba(111, 66, 193, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Completed',
                            data: completedTickets,
                            backgroundColor: 'rgba(25, 135, 84, 0.7)',
                            borderColor: 'rgba(25, 135, 84, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    ...commonChartOptions,
                    scales: {
                        x: {
                            stacked: true,
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        ...commonChartOptions.plugins,
                        tooltip: {
                            callbacks: {
                                afterLabel: function(context) {
                                    const dataset = context.dataset;
                                    const total = totalTickets[context.dataIndex];
                                    const percentage = Math.round((dataset.data[context.dataIndex] / total) * 100);
                                    return `Percentage: ${percentage}%`;
                                }
                            }
                        }
                    }
                }
            });

            // Handle window resize for better responsiveness
            let resizeTimer;
            window.addEventListener('resize', function() {
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function() {
                    statusCtx.chart.resize();
                    ticketStatusCtx.chart.resize();
                    projectTicketCtx.chart.resize();
                }, 200);
            });
        });
    </script>
}

@section Styles {
    <style>
        /* ... (keep your existing styles) ... */

        /* Enhanced chart styling */
        .chart-container {
            min-height: 200px;
            width: 100%;
        }

        /* Adjust chart sizes for different screens */
        @@media (max-width: 768px) {
            .chart-container {
                height: 250px !important;
            }
        }

        @@media (min-width: 992px) {
            .chart-container {
                height: 280px !important;
            }

            #projectTicketChart {
                height: 350px !important;
            }
        }

        /* Better tab styling for mobile */
        .nav-tabs .nav-link {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }

        /* Card body padding adjustment */
        .card-body {
            padding: 1rem;
        }

        @@media (max-width: 576px) {
            .card-body {
                padding: 0.75rem;
            }
        }
    </style>
}