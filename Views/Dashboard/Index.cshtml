@using System.Security.Claims
@model StackFlow.ViewModels.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

@* The content below will directly fill the 'main-content' div from _Layout.cshtml.
   The 'main-content' div handles its own padding and width based on the sidebar state. *@

<h1 class="display-4 fw-bold text-primary mb-4">Welcome, @Model.Username!</h1>
<p class="lead text-muted mb-4">Your role: <span class="badge bg-secondary">@Model.Role</span></p>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-x-circle-fill me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@* My Assigned Tickets Table - Render Partial (This remains visible as it's likely high priority) *@
<div id="assignedTicketsTable">
    @await Html.PartialAsync("_AssignedTicketsTablePartial", Model.AssignedToMeTickets)
</div>

<hr class="my-5"> @* Separator for clarity *@

@* Tabbed Navigation for Quick Insights and Projects Overview *@
<ul class="nav nav-tabs mb-3" id="dashboardTabs" role="tablist">
    @if (User.IsInRole("Admin"))
    {
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="insights-tab" data-bs-toggle="tab" data-bs-target="#quickInsightsContainer" type="button" role="tab" aria-controls="quickInsightsContainer" aria-selected="true">Quick Insights</button>
        </li>
    }
    <li class="nav-item" role="presentation">
        <button class="nav-link @(User.IsInRole("Admin") ? "" : "active")" id="projects-tab" data-bs-toggle="tab" data-bs-target="#projectsOverviewContainer" type="button" role="tab" aria-controls="projectsOverviewContainer" aria-selected="@(User.IsInRole("Admin") ? "false" : "true")">Projects Overview</button>
    </li>
</ul>

<div class="tab-content" id="dashboardTabsContent">
    @if (User.IsInRole("Admin"))
    {
        <div class="tab-pane fade show active" id="quickInsightsContainer" role="tabpanel" aria-labelledby="insights-tab">
            @* Quick Insights for Admins - Render Partial *@
            @await Html.PartialAsync("_QuickInsightsPartial", Model)
        </div>
    }
    <div class="tab-pane fade @(User.IsInRole("Admin") ? "" : "show active")" id="projectsOverviewContainer" role="tabpanel" aria-labelledby="projects-tab">
        @* All Projects Overview - Render Partial *@
        @await Html.PartialAsync("_ProjectsOverviewPartial", Model.Projects)
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const currentUserId = @(User.Identity.IsAuthenticated? User.FindFirstValue(System.Security.Claims.ClaimTypes.NameIdentifier) : "null");

            // Function to dynamically load and replace a partial view via AJAX
            async function loadPartialView(containerId, actionUrl, modelData = null) {
                const container = document.getElementById(containerId);
                if (!container) {
                    console.error(`Container with ID '${containerId}' not found.`);
                    return;
                }

                try {
                    // Show a loading spinner or skeleton while content loads (optional but good for UX)
                    container.innerHTML = '<div class="d-flex justify-content-center align-items-center" style="min-height: 100px;"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';

                    let url = actionUrl;
                    if (modelData) {
                        const params = new URLSearchParams();
                        for (const key in modelData) {
                            if (modelData.hasOwnProperty(key)) {
                                params.append(key, modelData[key]);
                            }
                        }
                        url = `${actionUrl}?${params.toString()}`;
                    }

                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const html = await response.text();
                    container.innerHTML = html;
                    console.log(`Partial view for ${containerId} refreshed.`);
                } catch (error) {
                    console.error(`Error loading partial view for ${containerId}:`, error);
                    container.innerHTML = '<div class="alert alert-danger" role="alert">Failed to load content. Please try again.</div>';
                }
            }

            // --- SignalR Event Listeners ---

            // Handle Ticket Updates
            document.addEventListener('ticketUpdate', function (event) {
                const { action, ticketId, oldStatus } = event.detail;
                console.log(`Ticket ${action} notification for ID: ${ticketId}. Refreshing relevant sections.`);

                // Always refresh assigned tickets table
                loadPartialView('assignedTicketsTable', '/Dashboard/GetAssignedTicketsTable', { userId: currentUserId });

                // Only refresh quick insights if the tab is active and user is an admin
                const insightsTab = document.getElementById('quickInsightsContainer');
                if (insightsTab && insightsTab.classList.contains('show') && insightsTab.classList.contains('active') && @(User.IsInRole("Admin") ? "true" : "false")) {
                    loadPartialView('quickInsightsContainer', '/Dashboard/GetQuickInsights');
                }
            });

            // Handle Project Updates
            document.addEventListener('projectUpdate', function (event) {
                const { action, projectId } = event.detail;
                console.log(`Project ${action} notification for ID: ${projectId}. Refreshing projects overview.`);

                // Only refresh quick insights if the tab is active and user is an admin
                const insightsTab = document.getElementById('quickInsightsContainer');
                if (insightsTab && insightsTab.classList.contains('show') && insightsTab.classList.contains('active') && @(User.IsInRole("Admin") ? "true" : "false")) {
                    loadPartialView('quickInsightsContainer', '/Dashboard/GetQuickInsights');
                }

                // Only refresh projects overview if the tab is active
                const projectsTab = document.getElementById('projectsOverviewContainer');
                if (projectsTab && projectsTab.classList.contains('show') && projectsTab.classList.contains('active')) {
                    loadPartialView('projectsOverviewContainer', '/Dashboard/GetProjectsOverview');
                }
            });

            // Initial load of content for the active tab (if not an admin, Projects tab will be active by default)
            const activeTabButton = document.querySelector('#dashboardTabs .nav-link.active');
            if (activeTabButton) {
                const targetContainerId = activeTabButton.getAttribute('data-bs-target').substring(1); // Remove '#'
                const actionUrl = targetContainerId === 'quickInsightsContainer' ? '/Dashboard/GetQuickInsights' : '/Dashboard/GetProjectsOverview';
                loadPartialView(targetContainerId, actionUrl);
            }
        });
    </script>
}