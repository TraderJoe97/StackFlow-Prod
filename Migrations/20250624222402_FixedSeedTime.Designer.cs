// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackFlow.Data;

#nullable disable

namespace StackFlow.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250624222402_FixedSeedTime")]
    partial class FixedSeedTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StackFlow.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("date")
                        .HasColumnName("comment_created_at");

                    b.Property<int>("Created_By")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int>("Ticket_Id")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("Created_By");

                    b.HasIndex("Ticket_Id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("StackFlow.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Created_By")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_description");

                    b.Property<DateTime?>("Due_Date")
                        .HasColumnType("date")
                        .HasColumnName("project_due_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("project_name");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("date")
                        .HasColumnName("project_start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_status");

                    b.HasKey("Id");

                    b.HasIndex("Created_By");

                    b.ToTable("projects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = 1,
                            Description = "This is a test project.",
                            Name = "Seed Project",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("StackFlow.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("StackFlow.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Assigned_To")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to");

                    b.Property<DateTime>("Completed_At")
                        .HasColumnType("date")
                        .HasColumnName("ticket_completed_at");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("date")
                        .HasColumnName("ticket_created_at");

                    b.Property<int>("Created_By")
                        .HasColumnType("int")
                        .HasColumnName("ticket_created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticket_description");

                    b.Property<DateTime>("Due_Date")
                        .HasColumnType("date")
                        .HasColumnName("ticket_due_date");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ticket_priority");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ticket_status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ticket_title");

                    b.HasKey("Id");

                    b.HasIndex("Assigned_To");

                    b.HasIndex("Created_By");

                    b.HasIndex("Project_Id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("StackFlow.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_At = new DateTime(2025, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sipho@example.com",
                            Name = "Siphokazi",
                            PasswordHash = "placeholder-password",
                            Role_Id = 1
                        });
                });

            modelBuilder.Entity("StackFlow.Models.Comment", b =>
                {
                    b.HasOne("StackFlow.Models.User", "CreatedBy")
                        .WithMany("TicketComments")
                        .HasForeignKey("Created_By")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StackFlow.Models.Ticket", "Ticket")
                        .WithMany("TicketComments")
                        .HasForeignKey("Ticket_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("StackFlow.Models.Project", b =>
                {
                    b.HasOne("StackFlow.Models.User", "CreatedBy")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("Created_By")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("StackFlow.Models.Ticket", b =>
                {
                    b.HasOne("StackFlow.Models.User", "AssignedTo")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("Assigned_To");

                    b.HasOne("StackFlow.Models.User", "CreatedBy")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("Created_By")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StackFlow.Models.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StackFlow.Models.User", b =>
                {
                    b.HasOne("StackFlow.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StackFlow.Models.Project", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("StackFlow.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StackFlow.Models.Ticket", b =>
                {
                    b.Navigation("TicketComments");
                });

            modelBuilder.Entity("StackFlow.Models.User", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedProjects");

                    b.Navigation("CreatedTickets");

                    b.Navigation("TicketComments");
                });
#pragma warning restore 612, 618
        }
    }
}
